{"repository_name":"github.com/krthr/uuix","body":"# uuidx\n\nA tiny (<1KB), fast, and cryptographically secure UUID (v4) generator for Crystal.\n\n> This is the Crystal version of [@lukeed/uuid](https://github.com/lukeed/uuid)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     uuix:\n       github: krthr/uuix\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"uuix\"\n\nputs UUIX.random # bc524cd7-5ec3-48c4-9bcc-e9013c69dd6e\n```\n\n## Benchmarks\n\n```bash\nCrystal 0.33.0 [612825a53] (2020-02-14)\n\nLLVM: 8.0.0\nDefault target: x86_64-unknown-linux-gnu\n        UUIX: 920.14k (  1.09µs) (± 9.68%)  880B/op        fastest\nCrystal UUID: 647.32k (  1.54µs) (± 7.53%)  0.0B/op   1.42× slower\n```\n\n## Performance\n\n> Taken from https://github.com/lukeed/uuid\n\nThe reason why this UUID.V4 implementation is so much faster is two-fold:\n\n1. It composes an output with hexadecimal pairs (from a cached dictionary) instead of single characters.\n2. It allocates a larger Buffer/ArrayBuffer up front (expensive) and slices off chunks as needed (cheap).\n\nThe internal ArrayBuffer is 4096 bytes, which supplies **256** `random` invocations.\n\nA larger buffer would result in higher performance over time, but I found this to be a good balance of performance and memory space.\n\n## Contributing\n\n1. Fork it (<https://github.com/krthr/uuix/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [krthr](https://github.com/krthr) - creator and maintainer\n","program":{"html_id":"github.com/krthr/uuix/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/krthr/uuix","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/krthr/uuix/UUIX","path":"UUIX.html","kind":"module","full_name":"UUIX","name":"UUIX","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"uuix.cr","line_number":1,"url":"https://github.com/krthr/uuix/blob/6333555784bc35390884b50535540e49db918773/src/uuix.cr"}],"repository_name":"github.com/krthr/uuix","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"random-class-method","html_id":"random-class-method","name":"random","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/krthr/uuix/blob/6333555784bc35390884b50535540e49db918773/src/uuix.cr#L15","def":{"name":"random","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @@BUFFER.empty? || ((@@IDX + 16) > @@SIZE)\n  @@BUFFER = (Random.new.random_bytes(@@SIZE)).to_a\n  @@IDX = 0\nend\narr = @@BUFFER[@@IDX..(@@IDX = @@IDX + 16)]\n((((((((((((((((((@@HEX[arr[0]] + @@HEX[arr[1]]) + @@HEX[arr[2]]) + @@HEX[arr[3]]) + '-') + @@HEX[arr[4]]) + @@HEX[arr[5]]) + '-') + @@HEX[(arr[6] & 15) | 64]) + @@HEX[arr[7]]) + '-') + @@HEX[(arr[8] & 63) | 128]) + @@HEX[arr[9]]) + '-') + @@HEX[arr[10]]) + @@HEX[arr[11]]) + @@HEX[arr[12]]) + @@HEX[arr[13]]) + @@HEX[arr[14]]) + @@HEX[arr[15]]\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}}